type: edu
files:
- name: src/advisor/Main.java
  visible: true
  text: |
    package advisor;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    apply plugin: 'java'
    apply plugin: 'application'

    group 'advisor'
    version '1.0-SNAPSHOT'

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'com.google.code.gson:gson:+'
    }

    jar {
        manifest {
            attributes 'Main-Class' : 'advisor.Main'
        }
        from {
            configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }
  learner_created: false
- name: test/MockTokenServer.java
  visible: false
  text: |
    import org.hyperskill.hstest.mocks.web.WebServerMock;

    public class MockTokenServer extends Thread {

        WebServerMock accessServer;

        public MockTokenServer (WebServerMock accessServer) {
            this.accessServer = accessServer;
        }

        @Override
        public void run() {
            accessServer.start();
            accessServer.run();
        }

        public void stopMock() {
            interrupt();
        }
    }
  learner_created: false
- name: test/MusicAdvisorTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.WebServerMock;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;

    @SuppressWarnings("unused")
    public class MusicAdvisorTest extends StageTest<String> {

        private static final String fictiveAuthCode = "123123";
        private static final String fictiveAccessToken = "456456";
        private static final String fictiveRefreshToken = "567567";


        private static final int accessServerPort = 45678;
        private static final int resourceServerPort = 56789;

        private static final String accessServerUrl = "http://127.0.0.1:" + accessServerPort;
        private static final String resourceServerUrl = "http://127.0.0.1:" + resourceServerPort;

        private static final String[] arguments = new String[]{
                "-access",
                accessServerUrl,
                "-resource",
                resourceServerUrl,
                "-page",
                "1"
        };

        private static final String tokenResponse = "{" +
                "\"access_token\":\"" + fictiveAccessToken + "\"," +
                "\"token_type\":\"Bearer\"," +
                "\"expires_in\":3600," +
                "\"refresh_token\":" + "\"" + fictiveRefreshToken + "\"," +
                "\"scope\":\"\"" +
                "}";

        // TODO handle auth code argument to get the token.
        private static final WebServerMock accessServer = new WebServerMock(accessServerPort)
                .setPage("/api/token", tokenResponse);


        private static final String spotifyServerUrl = "https://api\\.spotify\\.com";

        private static final String apiCategoriesResponse = """
            {
                "categories": {
                    "href": "https://api.spotify.com/v1/browse/categories?offset=0&limit=20",
                    "items": [
                        {
                            "href": "https://api.spotify.com/v1/browse/categories/toplists",
                            "icons": [
                                {
                                    "height": 275,
                                    "url": "https://datsnxq1rwndn.cloudfront.net/media/derived/toplists_11160599e6a04ac5d6f2757f5511778f_0_0_275_275.jpg",
                                    "width": 275
                                }
                            ],
                            "id": "toplists",
                            "name": "Top Lists"
                        },
                        {
                            "href": "https://api.spotify.com/v1/browse/categories/mood",
                            "icons": [
                                {
                                    "height": 274,
                                    "url": "https://datsnxq1rwndn.cloudfront.net/media/original/mood-274x274_976986a31ac8c49794cbdc7246fd5ad7_274x274.jpg",
                                    "width": 274
                                }
                            ],
                            "id": "mood",
                            "name": "Super Mood"
                        },
                        {
                            "href": "https://api.spotify.com/v1/browse/categories/party",
                            "icons": [
                                {
                                    "height": 274,
                                    "url": "https://datsnxq1rwndn.cloudfront.net/media/derived/party-274x274_73d1907a7371c3bb96a288390a96ee27_0_0_274_274.jpg",
                                    "width": 274
                                }
                            ],
                            "id": "party",
                            "name": "Party Time"
                        }
                    ],
                    "limit": 20,
                    "next": null,
                    "offset": 0,
                    "previous": null,
                    "total": 3
                }
            }""";


        private static final String apiPlaylistsPartyResponse = """
            {
                "playlists": {
                    "href": "https://api.spotify.com/v1/browse/categories/party/playlists?offset=0&limit=20",
                    "items": [
                        {
                            "collaborative": false,
                            "external_urls": {
                                "spotify": "http://open.spotify.com/user/spotifybrazilian/playlist/4k7EZPI3uKMz4aRRrLVfen"
                            },
                            "href": "https://api.spotify.com/v1/users/spotifybrazilian/playlists/4k7EZPI3uKMz4aRRrLVfen",
                            "id": "4k7EZPI3uKMz4aRRrLVfen",
                            "images": [
                                {
                                    "height": 300,
                                    "url": "https://i.scdn.co/image/bf6544c213532e9650088dfef76c8521093d970e",
                                    "width": 300
                                }
                            ],
                            "name": "Noite Eletronica",
                            "owner": {
                                "external_urls": {
                                    "spotify": "http://open.spotify.com/user/spotifybrazilian"
                                },
                                "href": "https://api.spotify.com/v1/users/spotifybrazilian",
                                "id": "spotifybrazilian",
                                "type": "user",
                                "uri": "spotify:user:spotifybrazilian"
                            },
                            "public": null,
                            "snapshot_id": "PULvu1V2Ps8lzCxNXfNZTw4QbhBpaV0ZORc03Mw6oj6kQw9Ks2REwhL5Xcw/74wL",
                            "tracks": {
                                "href": "https://api.spotify.com/v1/users/spotifybrazilian/playlists/4k7EZPI3uKMz4aRRrLVfen/tracks",
                                "total": 100
                            },
                            "type": "playlist",
                            "uri": "spotify:user:spotifybrazilian:playlist:4k7EZPI3uKMz4aRRrLVfen"
                        },
                        {
                            "collaborative": false,
                            "external_urls": {
                                "spotify": "http://open.spotify.com/user/spotifybrazilian/playlist/4HZh0C9y80GzHDbHZyX770"
                            },
                            "href": "https://api.spotify.com/v1/users/spotifybrazilian/playlists/4HZh0C9y80GzHDbHZyX770",
                            "id": "4HZh0C9y80GzHDbHZyX770",
                            "images": [
                                {
                                    "height": 300,
                                    "url": "https://i.scdn.co/image/be6c333146674440123073cb32c1c8b851e69023",
                                    "width": 300
                                }
                            ],
                            "name": "Festa Indie",
                            "owner": {
                                "external_urls": {
                                    "spotify": "http://open.spotify.com/user/spotifybrazilian"
                                },
                                "href": "https://api.spotify.com/v1/users/spotifybrazilian",
                                "id": "spotifybrazilian",
                                "type": "user",
                                "uri": "spotify:user:spotifybrazilian"
                            },
                            "public": null,
                            "snapshot_id": "V66hh9k2HnLCdzHvtoXPv+tm0jp3ODM63SZ0oISfGnlHQxwG/scupDbKgIo99Zfz",
                            "tracks": {
                                "href": "https://api.spotify.com/v1/users/spotifybrazilian/playlists/4HZh0C9y80GzHDbHZyX770/tracks",
                                "total": 74
                            },
                            "type": "playlist",
                            "uri": "spotify:user:spotifybrazilian:playlist:4HZh0C9y80GzHDbHZyX770"
                        }
                    ],
                    "limit": 20,
                    "next": null,
                    "offset": 0,
                    "previous": null,
                    "total": 2
                }
            }""".replaceAll(spotifyServerUrl, resourceServerUrl);

        private static final String testErrorMessage = "Test unpredictable error message";

        private static final String apiTestErrorResponse = "{\"error\":{\"status\":404,\"message\":\"" + testErrorMessage + "\"}}";

        private static final String apiNewReleasesResponse = """
            {
                "albums": {
                    "href": "https://api.spotify.com/v1/browse/new-releases?offset=0&limit=20",
                    "items": [
                        {
                            "album_type": "single",
                            "artists": [
                                {
                                    "external_urls": {
                                        "spotify": "https://open.spotify.com/artist/2RdwBSPQiwcmiDo9kixcl8"
                                    },
                                    "href": "https://api.spotify.com/v1/artists/2RdwBSPQiwcmiDo9kixcl8",
                                    "id": "2RdwBSPQiwcmiDo9kixcl8",
                                    "name": "Pharrell Williams",
                                    "type": "artist",
                                    "uri": "spotify:artist:2RdwBSPQiwcmiDo9kixcl8"
                                }
                            ],
                            "available_markets": [
                                "AD"
                            ],
                            "external_urls": {
                                "spotify": "https://open.spotify.com/album/5ZX4m5aVSmWQ5iHAPQpT71"
                            },
                            "href": "https://api.spotify.com/v1/albums/5ZX4m5aVSmWQ5iHAPQpT71",
                            "id": "5ZX4m5aVSmWQ5iHAPQpT71",
                            "images": [
                                {
                                    "height": 640,
                                    "url": "https://i.scdn.co/image/e6b635ebe3ef4ba22492f5698a7b5d417f78b88a",
                                    "width": 640
                                },
                                {
                                    "height": 300,
                                    "url": "https://i.scdn.co/image/92ae5b0fe64870c09004dd2e745a4fb1bf7de39d",
                                    "width": 300
                                },
                                {
                                    "height": 64,
                                    "url": "https://i.scdn.co/image/8a7ab6fc2c9f678308ba0f694ecd5718dc6bc930",
                                    "width": 64
                                }
                            ],
                            "name": "Runnin'",
                            "type": "album",
                            "uri": "spotify:album:5ZX4m5aVSmWQ5iHAPQpT71"
                        },
                        {
                            "album_type": "single",
                            "artists": [
                                {
                                    "external_urls": {
                                        "spotify": "https://open.spotify.com/artist/3TVXtAsR1Inumwj472S9r4"
                                    },
                                    "href": "https://api.spotify.com/v1/artists/3TVXtAsR1Inumwj472S9r4",
                                    "id": "3TVXtAsR1Inumwj472S9r4",
                                    "name": "Drake2",
                                    "type": "artist",
                                    "uri": "spotify:artist:3TVXtAsR1Inumwj472S9r4"
                                }
                            ],
                            "available_markets": [
                                "AD"
                            ],
                            "external_urls": {
                                "spotify": "https://open.spotify.com/album/0geTzdk2InlqIoB16fW9Nd"
                            },
                            "href": "https://api.spotify.com/v1/albums/0geTzdk2InlqIoB16fW9Nd",
                            "id": "0geTzdk2InlqIoB16fW9Nd",
                            "images": [
                                {
                                    "height": 640,
                                    "url": "https://i.scdn.co/image/d40e9c3d22bde2fbdb2ecc03cccd7a0e77f42e4c",
                                    "width": 640
                                },
                                {
                                    "height": 300,
                                    "url": "https://i.scdn.co/image/dff06a3375f6d9b32ecb081eb9a60bbafecb5731",
                                    "width": 300
                                },
                                {
                                    "height": 64,
                                    "url": "https://i.scdn.co/image/808a02bd7fc59b0652c9df9f68675edbffe07a79",
                                    "width": 64
                                }
                            ],
                            "name": "Sneakin'",
                            "type": "album",
                            "uri": "spotify:album:0geTzdk2InlqIoB16fW9Nd"
                        }
                    ],
                    "limit": 20,
                    "next": null,
                    "offset": 0,
                    "previous": null,
                    "total": 2
                }
            }""".replaceAll(spotifyServerUrl, resourceServerUrl);


        private static final String apiFeaturedPlaylistsResponse = """
            {
                "message": "Monday morning music, coming right up!",
                "playlists": {
                    "href": "https://api.spotify.com/v1/browse/featured-playlists?offset=0&limit=20",
                    "items": [
                        {
                            "collaborative": false,
                            "external_urls": {
                                "spotify": "http://open.spotify.com/user/spotify/playlist/6ftJBzU2LLQcaKefMi7ee7"
                            },
                            "href": "https://api.spotify.com/v1/users/spotify/playlists/6ftJBzU2LLQcaKefMi7ee7",
                            "id": "6ftJBzU2LLQcaKefMi7ee7",
                            "images": [
                                {
                                    "height": 300,
                                    "url": "https://i.scdn.co/image/7bd33c65ebd1e45975bbcbbf513bafe272f033c7",
                                    "width": 300
                                }
                            ],
                            "name": "Monday Morning Mood",
                            "owner": {
                                "external_urls": {
                                    "spotify": "http://open.spotify.com/user/spotify"
                                },
                                "href": "https://api.spotify.com/v1/users/spotify",
                                "id": "spotify",
                                "type": "user",
                                "uri": "spotify:user:spotify"
                            },
                            "public": null,
                            "snapshot_id": "WwGvSIVUkUvGvqjgj/bQHlRycYmJ2TkoIxYfoalWlmIZT6TvsgvGMgtQ2dGbkrAW",
                            "tracks": {
                                "href": "https://api.spotify.com/v1/users/spotify/playlists/6ftJBzU2LLQcaKefMi7ee7/tracks",
                                "total": 245
                            },
                            "type": "playlist",
                            "uri": "spotify:user:spotify:playlist:6ftJBzU2LLQcaKefMi7ee7"
                        },
                        {
                            "collaborative": false,
                            "external_urls": {
                                "spotify": "http://open.spotify.com/user/spotify__sverige/playlist/4uOEx4OUrkoGNZoIlWMUbO"
                            },
                            "href": "https://api.spotify.com/v1/users/spotify__sverige/playlists/4uOEx4OUrkoGNZoIlWMUbO",
                            "id": "4uOEx4OUrkoGNZoIlWMUbO",
                            "images": [
                                {
                                    "height": 300,
                                    "url": "https://i.scdn.co/image/24aa1d1b491dd529b9c03392f350740ed73438d8",
                                    "width": 300
                                }
                            ],
                            "name": "Upp och hoppa!",
                            "owner": {
                                "external_urls": {
                                    "spotify": "http://open.spotify.com/user/spotify__sverige"
                                },
                                "href": "https://api.spotify.com/v1/users/spotify__sverige",
                                "id": "spotify__sverige",
                                "type": "user",
                                "uri": "spotify:user:spotify__sverige"
                            },
                            "public": null,
                            "snapshot_id": "0j9Rcbt2KtCXEXKtKy/tnSL5r4byjDBOIVY1dn4S6GV73EEUgNuK2hU+QyDuNnXz",
                            "tracks": {
                                "href": "https://api.spotify.com/v1/users/spotify__sverige/playlists/4uOEx4OUrkoGNZoIlWMUbO/tracks",
                                "total": 38
                            },
                            "type": "playlist",
                            "uri": "spotify:user:spotify__sverige:playlist:4uOEx4OUrkoGNZoIlWMUbO"
                        }
                    ],
                    "limit": 20,
                    "next": null,
                    "offset": 0,
                    "previous": null,
                    "total": 2
                }
            }""";

        private static final TempWebServerMock resourceServerMock = new TempWebServerMock(resourceServerPort)
                .setPage("/v1/browse/categories", apiCategoriesResponse)
                .setPage("/v1/browse/categories/party/playlists", apiPlaylistsPartyResponse)
                // unpredictable error on toplists request!!!
                .setPage("/v1/browse/categories/toplists/playlists", apiTestErrorResponse)
                .setPage("/v1/browse/new-releases", apiNewReleasesResponse)
                .setPage("/v1/browse/featured-playlists", apiFeaturedPlaylistsResponse);

        private static final MockTokenServer tokenServer = new MockTokenServer(accessServer);
        private static final MockTokenServer resourceServer = new MockTokenServer(resourceServerMock);

        public static void auth(TestedProgram userProgram) {

            Server server = new Server(userProgram, fictiveAuthCode);
            server.start();

            synchronized (accessServer) {
                if (!accessServer.isStarted())
                    tokenServer.start();
            }

            synchronized (resourceServerMock) {
                if (!resourceServerMock.isStarted())
                    resourceServer.start();
            }

            userProgram.goBackground();
            userProgram.execute("auth");

            try {
                server.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (Server.checkResult != null) {
                throw new WrongAnswer(Server.checkResult.getFeedback());
            }

            userProgram.stopBackground();
        }

        private void checkAlbum1(String reply) {
            String album1 = """
                Runnin'
                [Pharrell Williams]
                https://open.spotify.com/album/5ZX4m5aVSmWQ5iHAPQpT71"""
                .replaceAll(spotifyServerUrl, resourceServerUrl);

            String album2 = """
                Sneakin'
                [Drake2]
                https://open.spotify.com/album/0geTzdk2InlqIoB16fW9Nd"""
                .replaceAll(spotifyServerUrl, resourceServerUrl);

            if (!reply.contains(album1)) {
                throw new WrongAnswer("Album from page 1 not appeared on \"new\" action");
            }
            if (reply.contains(album2)) {
                throw new WrongAnswer("Album from page 2 appeared on page 1 on \"new\" action");
            }
            if (!reply.contains("---PAGE 1 OF 2---")) {
                throw new WrongAnswer("Something wrong with pagination format. Not found ---PAGE 1 OF 2---");
            }
        }

        private void checkAlbum2(String reply) {
            String album1 = """
                Runnin'
                [Pharrell Williams]
                https://open.spotify.com/album/5ZX4m5aVSmWQ5iHAPQpT71"""
                .replaceAll(spotifyServerUrl, resourceServerUrl);

            String album2 = """
                Sneakin'
                [Drake2]
                https://open.spotify.com/album/0geTzdk2InlqIoB16fW9Nd"""
                .replaceAll(spotifyServerUrl, resourceServerUrl);

            if (!reply.contains(album2)) {
                throw new WrongAnswer("Album from page 2 not appeared on \"new\" action");
            }
            if (reply.contains(album1)) {
                throw new WrongAnswer("Album from page 1 appeared on page 2 on \"new\" action");
            }

            if (!reply.contains("---PAGE 2 OF 2---")) {
                throw new WrongAnswer("Something wrong with pagination format. Not found ---PAGE 2 OF 2---");
            }
        }

        private int countAppearances(String str, String findStr) {
            int lastIndex = 0;
            int count = 0;

            while (lastIndex != -1) {
                lastIndex = str.indexOf(findStr, lastIndex);
                if (lastIndex != -1) {
                    count++;
                    lastIndex += findStr.length();
                }
            }
            return count;
        }

        @DynamicTest
        CheckResult testAuth() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);

            auth(userProgram);

            userProgram.execute("exit");
            userProgram.stop();

            return CheckResult.correct();

        }

        void testNewAlbums(TestedProgram userProgram) {
            userProgram.execute("new");

            String output = userProgram.getOutput();
            checkAlbum1(output);

            userProgram.execute("prev");
            output = userProgram.getOutput();
            if (!output.contains("No more pages")) {
                throw new WrongAnswer("Your output should be `No more pages` on -1 page.");
            }

            userProgram.execute("next");
            output = userProgram.getOutput();
            checkAlbum2(output);

            userProgram.execute("next");
            output = userProgram.getOutput();
            if (!output.contains("No more pages")) {
                throw new WrongAnswer("Your output should be `No more pages` after the last page.");
            }

            userProgram.execute("prev");
            output = userProgram.getOutput();
            checkAlbum1(output);

            userProgram.execute("exit");
        }

        @DynamicTest
        CheckResult testNew() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);
            auth(userProgram);

            if(!resourceServerMock.getAccess_token().contains(fictiveAccessToken)) {
                return CheckResult.wrong("Access Token is incorrect!");
            }

            testNewAlbums(userProgram);
            testNewAlbums(userProgram);

            userProgram.stop();

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult testCategoriesNextPrev() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);
            auth(userProgram);

            String category1 = "Top Lists";
            String category2 = "Super Mood";
            String category3 = "Party Time";



            userProgram.execute("categories");

            if(!resourceServerMock.getAccess_token().contains(fictiveAccessToken)) {
                return CheckResult.wrong("An error occurred while retrieving the category list:\n" +
                        "Access token is incorrect!");
            }

            String output = userProgram.getOutput();
            if (!output.contains("---PAGE 1 OF 3---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 1 OF 3---");
            }
            if (countAppearances(output, category1) != 1
                    || countAppearances(output, category2) != 0
                    || countAppearances(output, category3) != 0) {
                return CheckResult.wrong("Something wrong with showing categories and pages.\n" +
                                         "Should include \"" + category1 + "\" once, " +
                                         "exclude \"" + category2 + "\", and \"" + category3 + "\".");
            }

            userProgram.execute("next");
            output = userProgram.getOutput();
            if (!output.contains("---PAGE 2 OF 3---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 2 OF 3---");
            }
            if (countAppearances(output, category1) != 0
                    || countAppearances(output, category2) != 1
                    || countAppearances(output, category3) != 0) {
                return CheckResult.wrong("Something wrong with showing categories and pages.\n" +
                                         "Should include \"" + category2 + "\" once, " +
                                         "exclude \"" + category1 + "\", and \"" + category3 + "\".");
            }

            userProgram.execute("next");
            output = userProgram.getOutput();
            if (!output.contains("---PAGE 3 OF 3---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 3 OF 3---");
            }
            if (countAppearances(output, category1) != 0
                    || countAppearances(output, category2) != 0
                    || countAppearances(output, category3) != 1) {
                return CheckResult.wrong("Something wrong with showing categories and pages.\n" +
                                         "Should include \"" + category3 + "\" once, " +
                                         "exclude \"" + category1 + "\", and \"" + category2 + "\".");
            }

            userProgram.execute("prev");
            output = userProgram.getOutput();
            if (!output.contains("---PAGE 2 OF 3---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 2 OF 3---");
            }
            if (countAppearances(output, category1) != 0
                    || countAppearances(output, category2) != 1
                    || countAppearances(output, category3) != 0) {
                return CheckResult.wrong("Something wrong with showing categories and pages.\n" +
                                         "Should include \"" + category2 + "\" once, " +
                                         "exclude \"" + category1 + "\", and \"" + category3 + "\".");
            }

            userProgram.execute("prev");
            output = userProgram.getOutput();
            if (!output.contains("---PAGE 1 OF 3---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 1 OF 3---");
            }
            if (countAppearances(output, category1) != 1
                    || countAppearances(output, category2) != 0
                    || countAppearances(output, category3) != 0) {
                return CheckResult.wrong("Something wrong with showing categories and pages.\n" +
                                         "Should include \"" + category1 + "\" once, " +
                                         "exclude \"" + category2 + "\", and \"" + category3 + "\".");
            }

            userProgram.stop();
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult testFeatured() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);
            auth(userProgram);

            String featured1 =
                    "Monday Morning Mood\n" +
                    "http://open.spotify.com/user/spotify/playlist/6ftJBzU2LLQcaKefMi7ee7"
                    .replaceAll(spotifyServerUrl, resourceServerUrl);

            String featured2 =
                    "Upp och hoppa!\n" +
                    "http://open.spotify.com/user/spotify__sverige/playlist/4uOEx4OUrkoGNZoIlWMUbO"
                    .replaceAll(spotifyServerUrl, resourceServerUrl);

            userProgram.execute("featured");

            if(!resourceServerMock.getAccess_token().contains(fictiveAccessToken)) {
                return CheckResult.wrong("Access Token is incorrect!");
            }

            String output = userProgram.getOutput();
            if (!output.contains("---PAGE 1 OF 2---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 1 OF 2---");
            }
            if (countAppearances(output, featured1) != 1
                    || countAppearances(output, featured2) != 0) {
                return CheckResult.wrong("Something wrong with showing featured playlists and pages");
            }

            userProgram.execute("next");
            output = userProgram.getOutput();
            if (!output.contains("---PAGE 2 OF 2---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 2 OF 2---");
            }
            if (countAppearances(output, featured1) != 0
                    || countAppearances(output, featured2) != 1) {
                return CheckResult.wrong("Something wrong with showing featured playlists and pages");
            }

            userProgram.execute("prev");
            output = userProgram.getOutput();
            if (!output.contains("---PAGE 1 OF 2---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 1 OF 2---");
            }
            if (countAppearances(output, featured1) != 1
                    || countAppearances(output, featured2) != 0) {
                return CheckResult.wrong("Something wrong with showing featured playlists and pages");
            }

            userProgram.execute("exit");
            if (!userProgram.isFinished()) {
                userProgram.stop();
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult testPlayList() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);
            auth(userProgram);

            String playlist1 =
                    "Noite Eletronica\n" +
                    "http://open.spotify.com/user/spotifybrazilian/playlist/4k7EZPI3uKMz4aRRrLVfen"
                    .replaceAll(spotifyServerUrl, resourceServerUrl);

            String playlist2 =
                    "Festa Indie\n" +
                    "http://open.spotify.com/user/spotifybrazilian/playlist/4HZh0C9y80GzHDbHZyX770"
                    .replaceAll(spotifyServerUrl, resourceServerUrl);

            userProgram.execute("playlists Party Time");

            if(!resourceServerMock.getAccess_token().contains(fictiveAccessToken)) {
                return CheckResult.wrong("Access Token is incorrect!");
            }

            String output = userProgram.getOutput();
            if (!output.contains("---PAGE 1 OF 2---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 1 OF 2---");
            }
            if (countAppearances(output, playlist1) != 1
                    || countAppearances(output, playlist2) != 0) {
                return CheckResult.wrong("Something wrong with showing playlists and pages");
            }

            userProgram.execute("next");
            output = userProgram.getOutput();
            if (!output.contains("---PAGE 2 OF 2---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 2 OF 2---");
            }
            if (countAppearances(output, playlist1) != 0
                    || countAppearances(output, playlist2) != 1) {
                return CheckResult.wrong("Something wrong with showing playlists and pages");
            }

            userProgram.execute("prev");
            output = userProgram.getOutput();
            if (!output.contains("---PAGE 1 OF 2---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 1 OF 2---");
            }
            if (countAppearances(output, playlist1) != 1
                    || countAppearances(output, playlist2) != 0) {
                return CheckResult.wrong("Something wrong with showing playlists and pages");
            }

            userProgram.execute("exit");
            if (!userProgram.isFinished()) {
                userProgram.stop();
            }

            return CheckResult.correct();
        }


        @AfterClass
        public static void afterTest() {
            tokenServer.stopMock();
            resourceServer.stopMock();
        }

    }
  learner_created: false
- name: test/Server.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.output.OutputHandler;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.net.URI;
    import java.net.http.HttpClient;
    import java.net.http.HttpRequest;
    import java.net.http.HttpResponse;
    import java.net.http.HttpTimeoutException;
    import java.time.Duration;

    public class Server extends Thread {

        TestedProgram userProgram;
        private final String fictiveAuthCode;
        public static CheckResult checkResult = null;
        String redirectUri = "";


        public Server(TestedProgram userProgram, String fictiveAuthCode) {
            this.userProgram = userProgram;
            this.fictiveAuthCode = fictiveAuthCode;
        }

        @Override
        public void run() {
            long searchTime = System.currentTimeMillis();

            while (!Thread.interrupted()) {

                if (System.currentTimeMillis() - searchTime > 1000 * 9) {
                    checkResult = CheckResult.wrong("Not found a link with redirect_uri after 9 seconds.");
                    return;
                }

                String out = OutputHandler.getDynamicOutput();
                if (out.contains("redirect_uri=")) {
                    redirectUri = out.split("redirect_uri=")[1];
                    if (redirectUri.contains("&")) {
                        redirectUri = redirectUri.split("&")[0];
                    }
                    if (redirectUri.contains("\n")) {
                        redirectUri = redirectUri.split("\\R")[0];
                    }
                    break;
                }

                try {
                    sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }

            try {
                HttpClient client = HttpClient.newBuilder().build();
                HttpRequest emptyRequest = HttpRequest.newBuilder()
                    .uri(URI.create(redirectUri))
                    .timeout(Duration.ofMillis(500))
                    .GET()
                    .build();
                HttpRequest errorRequest = HttpRequest.newBuilder()
                    .uri(URI.create(redirectUri + "?error=access_denied"))
                    .timeout(Duration.ofMillis(500))
                    .GET()
                    .build();
                HttpRequest codeRequest = HttpRequest.newBuilder()
                    .uri(URI.create(redirectUri + "?code=" + fictiveAuthCode))
                    .timeout(Duration.ofMillis(500))
                    .GET()
                    .build();

                System.out.println("Tester: making requests to redirect uri: " + redirectUri);
                HttpResponse<String> badResponse = client.send(emptyRequest, HttpResponse.BodyHandlers.ofString());
                System.out.println("Tester: done request 1: " + badResponse.body());
                HttpResponse<String> badResponse2 = client.send(errorRequest, HttpResponse.BodyHandlers.ofString());
                System.out.println("Tester: done request 2: " + badResponse2.body());
                HttpResponse<String> goodResponse = client.send(codeRequest, HttpResponse.BodyHandlers.ofString());
                System.out.println("Tester: done request 3: " + goodResponse.body());

                if (!badResponse.body().contains("Authorization code not found. Try again.")
                    || !badResponse2.body().contains("Authorization code not found. Try again.")) {
                    checkResult = CheckResult.wrong("You should send to the browser: `Authorization code not found. Try again.` if there is no code.");
                    return;
                }

                if (!goodResponse.body().contains("Got the code. Return back to your program.")) {
                    checkResult = CheckResult.wrong("\"You should send `Got the code. Return back to your program.` \" +\n" +
                        "                        \"if the query contains the code.");
                }
            } catch (HttpTimeoutException e) {
                checkResult = CheckResult.wrong("Not received any response from the server, found in redirect_uri: "
                    + redirectUri);
            } catch (InterruptedException e) {
                checkResult = CheckResult.wrong("Request to " + redirectUri + " was interrupted. " +
                    "Make sure, that you give the right feedback in your browser.");
            } catch (Exception e) {
                System.out.println("Tester: Error: " + e.getMessage());
                checkResult = CheckResult.wrong("Something wrong with the server response.\n" +
                    "Make sure, that you get the right feedback in your browser.");
            }
        }
    }
  learner_created: false
- name: test/TempWebServerMock.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.WebPage;
    import org.hyperskill.hstest.mocks.web.WebServerMock;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.request.HttpRequestParser;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.ServerSocket;
    import java.net.Socket;
    import java.util.HashMap;
    import java.util.Map;

    public class TempWebServerMock extends WebServerMock {

        private static final String DELIM = "/";
        private static final String fictiveAccessToken = "456456";
        private static final String authorizationHeader = "Authorization";

    //    public static void main(String[] args) { // for testing
    //        org.hyperskill.hstest.mocks.web.WebServerMock ws = new org.hyperskill.hstest.mocks.web.WebServerMock(12345);
    //        ws.start();
    //        ws.run();
    //    }

        private ServerSocket serverSocket;
        private final Map<String, String> pages = new HashMap<>();
        private final int port;

        private boolean isStarted = false;
        private boolean isStopped = false;

        private String access_token = "";

        public TempWebServerMock(int port) {
            super(port);
            this.port = port;
        }

        public TempWebServerMock setPage(String url, String content) {
            return setPage(url, new WebPage().setContent(content));
        }

        public TempWebServerMock setPage(String url, WebPage page) {
            if (!url.startsWith(DELIM)) {
                url = DELIM + url;
            }
            pages.put(url, page.contentWithHeader());
            return this;
        }

        public String getAccess_token() {
            return access_token;
        }

        private void checkRequestHeaders(HttpRequest request) throws WrongAnswer {
            Map<String,String> requestHeaders = request.getHeaders();

            if(requestHeaders.containsKey(authorizationHeader)) {
                if(requestHeaders.get(authorizationHeader).contains(fictiveAccessToken)) {
                    access_token = requestHeaders.get(authorizationHeader);
                }
            }
        }

        private String resolveRequest(DataInputStream input) {
            HttpRequest request = HttpRequestParser.parse(input);
            checkRequestHeaders(request);
            return request != null ? request.getEndpoint() : null;
        }

        private void sendResponse(String path, DataOutputStream output) throws Exception {
            String response;
            if (path == null) {
                response = "Webpage not found!";
            } else {
                if (!path.startsWith(DELIM)) {
                    path = DELIM + path;
                }
                response = pages.getOrDefault(path, "Webpage not found!");
            }
            for (char c : response.toCharArray()) {
                output.write(c);
            }
        }

        private void handle(Socket socket) throws Exception {
            DataInputStream input = new DataInputStream(socket.getInputStream());
            DataOutputStream output = new DataOutputStream(socket.getOutputStream());
            sendResponse(resolveRequest(input), output);
            input.close();
            output.close();
            socket.close();
        }

        public void start() {
            try {
                serverSocket = new ServerSocket(port);
            } catch (IOException ignored) { }
        }

        public void run() {
            try {
                while (serverSocket != null && !serverSocket.isClosed()) {
                    isStarted = true;
                    isStopped = false;
                    handle(serverSocket.accept());
                }
            } catch (Exception ignored) { }
            isStarted = false;
            isStopped = true;
        }

        public void stop() {
            try {
                if (serverSocket != null) {
                    serverSocket.close();
                }
            } catch (IOException ignored) { }
        }

        public boolean isStarted() {
            return isStarted;
        }

        public boolean isStopped() {
            return isStopped;
        }
    }
  learner_created: false
- name: src/advisor/utils/ProgramArguments.java
  visible: true
  text: |
    package advisor.utils;
    import org.kohsuke.args4j.CmdLineException;
    import org.kohsuke.args4j.CmdLineParser;
    import org.kohsuke.args4j.Option;

    public class ProgramArguments {
        @Option(name= "-access", usage = "Spotify Server Path")
        private String serverPath = "https://accounts.spotify.com";

        @Option(name= "-resource", usage = "Spotify API Path")
        private String apiPath = "https://api.spotify.com";

        public String getApiPath() {
    //        System.out.println(apiPath);
            return apiPath;
        }

        public void setApiPath(String apiPath) {
            this.apiPath = apiPath;
        }

        public String getServerPath() {
            return serverPath;
        }

        public void setServerPath(String serverPath) {
            this.serverPath = serverPath;
        }
    }
  learner_created: true
- name: src/advisor/server/AuthServer.java
  visible: true
  text: |
    package advisor.server;

    import advisor.server.handlers.SpotifyHandler;
    import advisor.providers.SharedData;
    import com.sun.net.httpserver.HttpServer;

    import java.io.IOException;
    import java.net.InetSocketAddress;

    public class AuthServer {
        final static int port = 8080;
        final private HttpServer server;

        public AuthServer(SharedData sharedData) throws IOException {
            server = HttpServer.create(new InetSocketAddress(port), 0);

            SpotifyHandler spotifyHandler = new SpotifyHandler(sharedData);
            server.createContext("/login", spotifyHandler);
        }

        public void startServer() {
            server.start();
    //        System.out.println("Servidor iniciado en el puerto " + port);
        }

        public void stopServer() {
    //        System.out.println("Server fin");
            server.stop(1);
        }
    }
  learner_created: true
- name: src/advisor/providers/SpotifyProvider.java
  visible: true
  text: |
    package advisor.providers;

    import advisor.utils.ProgramArguments;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import com.google.gson.JsonParser;

    import java.io.IOException;
    import java.net.URI;
    import java.net.http.HttpClient;
    import java.net.http.HttpRequest;
    import java.net.http.HttpResponse;
    import java.text.SimpleDateFormat;
    import java.util.Date;

    public class SpotifyProvider {
        private final JsonObject tokenObject;
        private final HttpClient httpClient;
        private final ProgramArguments programArguments;

        public SpotifyProvider(JsonObject tokenObject, ProgramArguments programArguments) {
            this.tokenObject = tokenObject;
            this.programArguments = programArguments;
        }

        {
            httpClient = HttpClient.newBuilder().build();
        }

        public String getCategories() throws IOException, InterruptedException {
            String uri = this.programArguments.getApiPath()
                    .concat("/v1/browse/categories?country=MX&locale=mx_MX&limit=10&offset=5");
            HttpRequest httpRequest = HttpRequest.newBuilder()
                    .uri(URI.create(uri))
                    .header("Authorization", "Bearer " + tokenObject.get("access_token").getAsString())
                    .GET()
                    .build();
            HttpResponse<String> httpResponse = this.httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());

            JsonObject jsonObject = JsonParser.parseString(httpResponse.body()).getAsJsonObject();
            JsonObject categories = jsonObject.getAsJsonObject("categories");
            JsonArray items = categories.getAsJsonArray("items");

            StringBuilder response = new StringBuilder();
            for (JsonElement item : items) {
                response.append(item.getAsJsonObject().get("name").getAsString()).append("\n");
            }
            return response.toString().strip();
        }

        public String getNew() throws IOException, InterruptedException {
            String uri = this.programArguments.getApiPath()
                    .concat("/v1/browse/new-releases?country=MX&limit=10&offset=5");
            HttpRequest httpRequest = HttpRequest.newBuilder()
                    .uri(URI.create(uri))
                    .header("Authorization", "Bearer " + tokenObject.get("access_token").getAsString())
                    .GET()
                    .build();
            HttpResponse<String> httpResponse = this.httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());

            JsonObject jsonObject = JsonParser.parseString(httpResponse.body()).getAsJsonObject();
            JsonObject albums = jsonObject.getAsJsonObject("albums");
            JsonArray items = albums.getAsJsonArray("items");

            StringBuilder response = new StringBuilder();
            for (JsonElement item : items) {
                response.append(item.getAsJsonObject().get("name").getAsString()).append("\n[");
                JsonArray artists = item.getAsJsonObject().getAsJsonArray("artists");
                for (JsonElement artist : artists) {
                    response.append(artist.getAsJsonObject().get("name").getAsString())
                            .append(", ");
                }
                response.replace(response.length() - 2, response.length(), "]\n");
                JsonObject external_urls = item.getAsJsonObject()
                        .getAsJsonObject("external_urls");
                response.append(external_urls.get("spotify").getAsString())
                        .append("\n\n");
            }
            return response.toString().strip();
        }

        public String getFeatured() throws IOException, InterruptedException {
            String uri = this.programArguments.getApiPath()
                    .concat("/v1/browse/featured-playlists?country=MX&locale=mx_MX&limit=10&offset=5&timestamp=");
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyy-MM-dd'T'HH:mm:ss");
            String timeStamp = simpleDateFormat.format(new Date());

            HttpRequest httpRequest = HttpRequest.newBuilder()
                    .uri(URI.create(uri.concat(timeStamp)))
                    .header("Authorization", "Bearer " + tokenObject.get("access_token").getAsString())
                    .GET()
                    .build();
            HttpResponse<String> httpResponse = this.httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());

            JsonObject jsonObject = JsonParser.parseString(httpResponse.body()).getAsJsonObject();
            JsonObject playlists = jsonObject.getAsJsonObject("playlists");
            JsonArray items = playlists.getAsJsonArray("items");

            StringBuilder response = new StringBuilder();
            for (JsonElement item : items) {
                response.append(item.getAsJsonObject().get("name").getAsString()).append("\n");
                JsonObject external_urls = item.getAsJsonObject()
                        .getAsJsonObject("external_urls");
                response.append(external_urls.get("spotify").getAsString())
                        .append("\n\n");
            }
            return response.toString().strip();
        }

        public String getPlaylists(String mood) throws IOException, InterruptedException {
            String uri = this.programArguments.getApiPath()
                    .concat("/v1/browse/categories/")
                    .concat(mood)
                    .concat("/playlists")
                    .concat("?country=MX&limit=10&offset=5");
            HttpRequest httpRequest = HttpRequest.newBuilder()
                    .uri(URI.create(uri))
                    .header("Authorization", "Bearer " + tokenObject.get("access_token").getAsString())
                    .GET()
                    .build();
            HttpResponse<String> httpResponse = this.httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());
            JsonObject jsonObject = JsonParser.parseString(httpResponse.body()).getAsJsonObject();
            if (httpResponse.statusCode() != 200) {
                return jsonObject.getAsJsonObject("error")
                        .getAsJsonObject("message")
                        .getAsString();
            }
            JsonObject playlists = jsonObject.getAsJsonObject("playlists");
            JsonArray items = playlists.getAsJsonArray("items");

            StringBuilder response = new StringBuilder();
            for (JsonElement item : items) {
                JsonObject playlist = item.getAsJsonObject();
                response.append(playlist.get("name").getAsString());
                response.append("\n");
                response.append(playlist.getAsJsonObject("external_urls").get("spotify").getAsString());
                response.append("\n\n");
            }
            return response.toString();
        }

    }
  learner_created: true
- name: src/advisor/utils/HttpUtilQueries.java
  visible: true
  text: |
    package advisor.utils;

    import java.io.IOException;
    import java.net.URI;
    import java.net.http.HttpClient;
    import java.net.http.HttpRequest;
    import java.net.http.HttpResponse;
    import java.util.Base64;

    public class HttpUtilQueries {

        HttpClient httpClient;

        public HttpUtilQueries() {
        }

        {
            httpClient = HttpClient.newBuilder().build();
        }

        public void getRequest(String uri) throws IOException, InterruptedException {
            HttpRequest httpRequest = HttpRequest.newBuilder()
                    .uri(URI.create(uri))
                    .GET()
                    .build();
            HttpResponse<String> httpResponse = this.httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());
            System.out.println(httpResponse.body());
        }

        public HttpResponse<String> postRequest(String uri, String request) throws IOException, InterruptedException {
            String client_id = "309d98be14e14df9bdfe3bf3a4366ffd";
            String client_secret = "5ea58477b4e44e73b806061cf767afa3";
            String credentials = Base64.getEncoder().encodeToString((client_id + ":" + client_secret).getBytes());
            HttpRequest httpRequest = HttpRequest.newBuilder()
                    .uri(URI.create(uri))
                    .header("Authorization", "Basic " + credentials)
                    .header("Content-Type", "application/x-www-form-urlencoded")
                    .POST(HttpRequest.BodyPublishers.ofString(request))
                    .build();
            return this.httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());
        }

    }
  learner_created: true
- name: src/advisor/providers/SharedData.java
  visible: true
  text: |
    package advisor.providers;

    public class SharedData {
        private String authCode;
        private boolean hasCode = false;

        public String getAuthCode() {
            return authCode;
        }

        public void setAuthCode(String authCode) {
            this.authCode = authCode;
        }

        public void setHasCode(boolean hasCode) {
            this.hasCode = hasCode;
        }

        public boolean isHasCode() {
            return hasCode;
        }
    }
  learner_created: true
- name: src/advisor/providers/ApiProvider.java
  visible: true
  text: |
    package advisor.providers;

    import advisor.models.OAuthModel;
    import advisor.utils.ProgramArguments;

    import java.io.IOException;

    public class ApiProvider {
        private final ProgramArguments programArguments;
        private final OAuthModel oAuthModel;
        private SpotifyProvider spotifyProvider;
        private Boolean authorization;

        public ApiProvider(ProgramArguments programArguments) {
            this.programArguments = programArguments;
            this.oAuthModel = new OAuthModel(programArguments);
            this.authorization = false;
        }


        //    featured — a list of Spotify-featured playlists with their links fetched from API;
        public void getFeatured() {
            if (!authorization) {
                System.out.println("Please, provide access for application.");
                return;
            }
            try {
                System.out.println(this.spotifyProvider.getFeatured());
            } catch (IOException | InterruptedException e) {
                throw new RuntimeException(e);
            }
        }

        //    new — a list of new albums with artists and links on Spotify;
        public void getNew() {
            if (!authorization) {
                System.out.println("Please, provide access for application.");
                return;
            }
            try {
                System.out.println(this.spotifyProvider.getNew());
            } catch (IOException | InterruptedException e) {
                throw new RuntimeException(e);
            }
        }

        //    categories — a list of all available categories on Spotify (just their names);
        public void getCategories() {
            if (!authorization) {
                System.out.println("Please, provide access for application.");
                return;
            }
            try {
                System.out.println(this.spotifyProvider.getCategories());
            } catch (IOException | InterruptedException e) {
                throw new RuntimeException(e);
            }
        }

        //    playlists C_NAME, where C_NAME is the name of category. The list contains playlists of this category and their links on Spotify;

        public void getPlaylists(String mood) {
            if (!authorization) {
                System.out.println("Please, provide access for application.");
                return;
            }
            try {
                System.out.println(this.spotifyProvider.getPlaylists(mood));
            } catch (IOException | InterruptedException e) {
                throw new RuntimeException(e);
            }
        }

        //    exit shuts down the application.
        public void getExit() {
            System.exit(0);
        }

        public void authorize() {
            oAuthModel.getUserAuth();
            oAuthModel.waitAuth();
            oAuthModel.reqToken();
            this.authorization = oAuthModel.getAuth();
            if (this.authorization) {
                spotifyProvider = new SpotifyProvider(oAuthModel.getToken(), programArguments);
                System.out.println("Success!");
            } else {
                System.out.println("Error :(");
            }
        }

    }
  learner_created: true
- name: src/advisor/models/OAuthModel.java
  visible: true
  text: |
    package advisor.models;

    import advisor.providers.SharedData;
    import advisor.server.AuthServer;
    import advisor.utils.HttpUtilQueries;
    import advisor.utils.ProgramArguments;
    import com.google.gson.JsonObject;
    import com.google.gson.JsonParser;

    import java.io.IOException;
    import java.net.URLEncoder;
    import java.net.http.HttpResponse;
    import java.nio.charset.StandardCharsets;
    import java.text.MessageFormat;

    public class OAuthModel {
        private final SharedData sharedData;
        private final ProgramArguments programArguments;
        private final HttpUtilQueries httpUtilQueries;
        private AuthServer authServer;
        private JsonObject tokenObject;

        private Boolean authorization;

        {
            this.sharedData = new SharedData();
        }

        public OAuthModel(ProgramArguments programArguments) {
            this.programArguments = programArguments;
            this.httpUtilQueries = new HttpUtilQueries();
            this.initializeServer();
        }

        private void initializeServer() {
            try {
                authServer = new AuthServer(this.sharedData);
                authServer.startServer();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }

        public void getUserAuth() {
            System.out.println(MessageFormat.format("use this link to request the access code:\n{0}/authorize?client_id=309d98be14e14df9bdfe3bf3a4366ffd&redirect_uri=http://127.0.0.1:8080/login&response_type=code\nwaiting for code...", programArguments.getServerPath()));
        }

        public void waitAuth() {
            do {
                synchronized (sharedData) {
                    try {
                        sharedData.wait();
                        authorization = sharedData.isHasCode();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            } while (!authorization);
            this.stopServer();
            System.out.println(sharedData.isHasCode() ? "code received" : "code denied");
        }

        public void stopServer(){
            authServer.stopServer();
        }

        public void reqToken() {
            if (authorization) {
                try {
                    System.out.println("making http request for access_token...");
                    String requestBody =
                            "code=" + URLEncoder.encode(sharedData.getAuthCode(), StandardCharsets.UTF_8)
                                    + "&redirect_uri=" + URLEncoder.encode("http://127.0.0.1:8080/login", StandardCharsets.UTF_8)
                                    + "&grant_type=authorization_code";
                    HttpResponse<String> response = httpUtilQueries.postRequest(
                            programArguments.getServerPath() + "/api/token",
                            requestBody
                    );
                    if (response.statusCode() == 200) {
    //                    System.out.println("response:\n" + response.body());
                        this.tokenObject = JsonParser.parseString(response.body()).getAsJsonObject();
                    }
                } catch (IOException | InterruptedException e) {
                    throw new RuntimeException(e);
                }
            }
        }

        public boolean getAuth() {
            return this.authorization;
        }

        public JsonObject getToken() {
            return tokenObject;
        }
    }
  learner_created: true
- name: src/advisor/server/handlers/SpotifyHandler.java
  visible: true
  text: |
    package advisor.server.handlers;

    import advisor.providers.SharedData;
    import com.sun.net.httpserver.HttpExchange;
    import com.sun.net.httpserver.HttpHandler;

    import java.io.IOException;
    import java.io.OutputStream;

    public class SpotifyHandler implements HttpHandler {
        private final SharedData sharedData;

        public SpotifyHandler(SharedData sharedData) {
            this.sharedData = sharedData;
        }

        protected String code;

        @Override
        public void handle(HttpExchange exchange) throws IOException {
    //        System.out.println("Entre al handler");
    //        System.out.println(exchange);
            String response = "";
    //        System.out.println(exchange.getRequestURI());

            String query = exchange.getRequestURI().getQuery();
    //        System.out.println(query);
    //        if(query.equals(null)) throw new RuntimeException("Error null");
            if(query == null || !query.contains("code")){
                response = "Authorization code not found. Try again.";
    //            System.out.println(response);
                exchange.sendResponseHeaders(400, response.getBytes().length);

                OutputStream outputStream = exchange.getResponseBody();
                outputStream.write(response.getBytes());
                outputStream.flush();
                outputStream.close();

                sharedData.setHasCode(false);

            } else {
                response = "Got the code. Return back to your program.";
    //            System.out.println(response);
                exchange.sendResponseHeaders(200, response.getBytes().length);

                OutputStream outputStream = exchange.getResponseBody();
                outputStream.write(response.getBytes());
                outputStream.flush();
                outputStream.close();
                String code = query.split("=")[1];

                sharedData.setAuthCode(code);
                sharedData.setHasCode(true);

            }
    //        exchange.getResponseHeaders().set("Content-Type", "text/plain");

            synchronized (sharedData) {
                sharedData.notify();
            }
    //        else if(requestPath.equals("/"))
        }

    }
  learner_created: true
- name: src/advisor/controllers/MenuApp.java
  visible: true
  text: |
    package advisor.application;

    import advisor.providers.ApiProvider;
    import advisor.utils.ProgramArguments;

    import java.util.Scanner;

    public class MenuApp {
        private final ProgramArguments programArguments;

        public MenuApp(ProgramArguments programArguments) {
            this.programArguments = programArguments;
        }

        public void startUI() {
            Scanner scanner = new Scanner(System.in);
            String input;
            ApiProvider apiProvider = new ApiProvider(programArguments);
            do {
                input = scanner.nextLine();
                switch (input) {
                    case "new" -> apiProvider.getNew();
                    case "featured" -> apiProvider.getFeatured();
                    case "categories" -> apiProvider.getCategories();
                    case "exit" -> apiProvider.getExit();
                    case "auth" -> apiProvider.authorize();
                    default -> {
                        if (input.contains("playlists")) {
                            apiProvider.getPlaylists(input.split(" ")[1]);
                        }
                    }
                }
            } while (!input.equals("exit"));
        }
    }
  learner_created: true
- name: src/advisor/utils/strategy/Printer.java
  visible: true
  learner_created: true
- name: src/advisor/utils/concreteStrat/CategoryPrinter.java
  visible: true
  learner_created: true
- name: src/advisor/utils/concreteStrat/NewPrinter.java
  visible: true
  learner_created: true
- name: src/advisor/utils/concreteStrat/FeaturedPrinter.java
  visible: true
  learner_created: true
- name: src/advisor/utils/concreteStrat/PlaylistPrinter.java
  visible: true
  learner_created: true
- name: src/advisor/utils/context/TypePrinter.java
  visible: true
  learner_created: true
- name: src/advisor/models/Category.java
  visible: true
  learner_created: true
- name: src/advisor/models/Featured.java
  visible: true
  learner_created: true
- name: src/advisor/models/New.java
  visible: true
  learner_created: true
- name: src/advisor/models/Playlist.java
  visible: true
  learner_created: true
- name: src/advisor/utils/concreteStrat/StrategyBase.java
  visible: true
  learner_created: true
- name: src/advisor/models/Pair.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5481#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Tue, 20 Jun 2023 23:22:48 UTC"
record: -1
