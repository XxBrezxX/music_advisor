type: edu
files:
- name: src/advisor/Main.java
  visible: true
  text: |
    package advisor;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    apply plugin: 'java'
    apply plugin: 'application'

    group 'advisor'
    version '1.0-SNAPSHOT'

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'com.google.code.gson:gson:+'
    }

    jar {
        manifest {
            attributes 'Main-Class' : 'advisor.Main'
        }
        from {
            configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }
  learner_created: false
- name: test/MusicAdvisorTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.List;
    import java.util.function.Function;

    class Attach {
        Function<String, CheckResult> func;

        Attach(Function<String, CheckResult> func) {
            this.func = func;
        }
    }

    public class MusicAdvisorTest extends StageTest<Attach> {

        @Override
        public List<TestCase<Attach>> generate() {
            return List.of(
                new TestCase<Attach>()
                    .setInput("auth\nexit")
                    .setAttach(new Attach(reply -> {
                        if (!reply.contains("---SUCCESS---")) {
                            return new CheckResult(false,
                                "There is no \"---SUCCESS---\" after \"auth\" but should be");
                        }
                        if (!reply.contains("https://accounts.spotify.com/authorize?")) {
                            return new CheckResult(false,
                                "There is no link after \"auth\" but should be");
                        }
    //                    if (reply.contains("a19ee7dbfda443b2a8150c9101bfd645")) {
    //                        return new CheckResult(false,
    //                                "You shouldn't use the client_id from the example!! " +
    //                                        "You should create your own id on the spotify site.");
    //                    }
                        return CheckResult.correct();
                    })),

                new TestCase<Attach>()
                    .setInput("new\nexit")
                    .setAttach(new Attach(reply -> {
                        if (!reply.strip().startsWith("Please, provide access for application.")) {
                            return new CheckResult(false,
                                "When no access provided you should output " +
                                    "\"Please, provide access for application.\"");
                        }
                        return CheckResult.correct();
                    })),

                new TestCase<Attach>()
                    .setInput("featured\nexit")
                    .setAttach(new Attach(reply -> {
                        if (!reply.strip().startsWith("Please, provide access for application.")) {
                            return new CheckResult(false,
                                "When no access provided you should output " +
                                    "\"Please, provide access for application.\"");
                        }
                        return CheckResult.correct();
                    })),

                new TestCase<Attach>()
                    .setInput("auth\nnew\nfeatured\nexit")
                    .setAttach(new Attach(reply -> {
                        if (!reply.contains("---NEW RELEASES---")) {
                            return new CheckResult(false,
                                "When \"new\" was inputted there should be \"---NEW RELEASES---\" line");
                        }
                        if (!reply.contains("---FEATURED---")) {
                            return new CheckResult(false,
                                "When \"featured\" was inputted there should be \"---FEATURED---\" line");
                        }
                        return CheckResult.correct();
                    }))

            );
        }

        @Override
        public CheckResult check(String reply, Attach clue) {
            return clue.func.apply(reply);
        }
    }
  learner_created: false
- name: src/advisor/ApiProvider.java
  visible: true
  text: |
    package advisor;

    public class ApiProvider {
        public ApiProvider() {
        }

        //    featured — a list of Spotify-featured playlists with their links fetched from API;
        //    new — a list of new albums with artists and links on Spotify;
        //    categories — a list of all available categories on Spotify (just their names);
        //    playlists C_NAME, where C_NAME is the name of category. The list contains playlists of this category and their links on Spotify;
        //    exit shuts down the application.
        static public String getFeatured() {
            return """
                    ---FEATURED---
                    Mellow Morning
                    Wake Up and Smell the Coffee
                    Monday Motivation
                    Songs to Sing in the Shower""";
        }

        static public String getNew(){
            return """
                    ---NEW RELEASES---
                    Mountains [Sia, Diplo, Labrinth]
                    Runaway [Lil Peep]
                    The Greatest Show [Panic! At The Disco]
                    All Out Life [Slipknot]""";
        }

        static public String getCategories(){
            return """
                    ---CATEGORIES---
                    Top Lists
                    Pop
                    Mood
                    Latin""";
        }

        static public String getPlaylists(String mood){
            StringBuilder stringBuilder = new StringBuilder("""
                    ---MOOD PLAYLISTS---
                    Walk Like A Badass \\s
                    Rage Beats \\s
                    Arab Mood Booster \\s
                    Sunday Stroll\"""");
            return stringBuilder.replace(3, 6, mood).toString();
        }

        static public String getExit(){
            return """
                    ---GOODBYE!---""";
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5478#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sun, 11 Jun 2023 20:44:24 UTC"
record: 2
